fn main() {
  let nodejs_worker = NodejsAdapter::new(NodejsAdapterOptions {
    workers: 1,
  });

  PROFILER.start("lol");
  for _ in 0..100_000  {
    nodejs_worker.ping();
  }
  PROFILER.lap("lol");

  // nodejs_worker.resolver_register("/Users/dalsh/Development/alshdavid/mach/testing/fixtures/plugins-nodejs/plugins/resolver-1.mjs");

  PROFILER.log_millis_total("lol");
  thread::sleep(Duration::from_secs(2));
}

// #![deny(unused_crate_dependencies)]

mod cmd;
mod kit;
mod platform;
mod public;

use std::io::BufReader;
use std::io::Write;
use std::process::Command;
use std::process::Stdio;
use std::sync::mpsc::channel;
use std::sync::mpsc::Receiver;
use std::sync::mpsc::Sender;
use std::sync::Arc;
use std::thread;
use std::time::Duration;

use ipc_channel::ipc::IpcOneShotServer;
use ipc_channel::ipc::IpcReceiver;
use ipc_channel::ipc::IpcSender;
use ipc_channel::ipc::{self};
use kit::profiler::PROFILER;
use platform::adapters::nodejs::NodejsAdapter;
use platform::adapters::nodejs::NodejsAdapterOptions;
use platform::adapters::nodejs::NodejsManager;
use platform::adapters::nodejs::NodejsManagerOptions;
use platform::adapters::nodejs::NodejsWorker;
use public::nodejs::NodejsClientRequest;
use public::nodejs::NodejsHostRequest;
use serde::Serialize;
use tokio::task::JoinSet;

use crate::public::nodejs::NodejsHostResponse;

async fn main_async() {
  let nodejs_worker = NodejsAdapter::new(NodejsAdapterOptions { workers: 6 }).await;

  PROFILER.start("bench");
  let mut reqs = JoinSet::new();

  for _ in 0..100_000 {
    let nodejs_worker = nodejs_worker.clone();

    reqs.spawn(tokio::spawn(async move { nodejs_worker.ping_one().await }));
  }

  while let Some(result) = reqs.join_next().await {
    result.unwrap().unwrap();
  }
  PROFILER.lap("bench");

  //

  PROFILER.log_millis_total("bench");
  thread::sleep(Duration::from_secs(2));
}
