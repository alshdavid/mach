name: 'alshdavid/build'
description: "Build Project"

inputs:
  os:
    description: 'target operating system'
    default: ${{ runner.os == 'Linux' && 'linux' || runner.os == 'macOS' && 'macos' || runner.os == 'Window' && 'windows' }}
  arch:
    description: 'target CPU architecture'
    default: ${{ runner.arch == 'ARM64' && 'arm64' || runner.arch == 'X64' && 'amd64' }}
  profile:
    description: 'Build profile'
    default: "release"
  mach_version:
    description: 'prepare packages for publishing'
    default: ''

runs:
  using: 'composite'
  steps:
    - name: "Build Project" 
      if: ${{ inputs.os == 'linux' && inputs.arch == 'amd64' }}
      shell: bash
      env:
        os: "${{inputs.os}}"
        arch: "${{inputs.arch}}"
        mach_version: "${{inputs.mach_version}}"
        profile: "${{inputs.profile}}"
      run: |
        source .github/workflows/platform/unix/setup-env.bash
        if ![ "$mach_version" = "" ]; then
          export MACH_VERSION="${mach_version}"
          just build-publish
        else
          just build
        fi
    
    - name: "Build Project" 
      if: ${{ inputs.os == 'linux' && inputs.arch == 'arm64' }}
      shell: bash
      env:
        os: "${{inputs.os}}"
        arch: "${{inputs.arch}}"
        mach_version: "${{inputs.mach_version}}"
        profile: "${{inputs.profile}}"
      run: |
        source .github/workflows/platform/unix/setup-env.bash
        export CC=aarch64-linux-gnu-gcc
        export MACH_SKIP_POST_INSTALL="true"

        sudo apt-get update
        sudo apt-get install gcc-aarch64-linux-gnu build-essential
        rustup target add aarch64-unknown-linux-gnu
        aarch64-linux-gnu-gcc --version

        if ![ "$mach_version" = "" ]; then
          export MACH_VERSION="${mach_version}"
          just build-publish
        else
          just build
        fi
    
    - name: "Build Project" 
      if: ${{ inputs.os == 'macos' && inputs.arch == 'amd64' }}
      shell: bash
      env:
        os: "${{inputs.os}}"
        arch: "${{inputs.arch}}"
        mach_version: "${{inputs.mach_version}}"
        profile: "${{inputs.profile}}"
      run: |
        source .github/workflows/platform/unix/setup-env.bash
        rustup target add x86_64-apple-darwin
        
        if ![ "$mach_version" = "" ]; then
          export MACH_VERSION="${mach_version}"
          just build-publish
        else
          just build
        fi

    - name: "Build Project" 
      if: ${{ inputs.os == 'macos' && inputs.arch == 'arm64' }}
      shell: bash
      env:
        os: "${{inputs.os}}"
        arch: "${{inputs.arch}}"
        mach_version: "${{inputs.mach_version}}"
        profile: "${{inputs.profile}}"
      run: |
        source .github/workflows/platform/unix/setup-env.bash
        
        if ![ "$mach_version" = "" ]; then
          export MACH_VERSION="${mach_version}"
          just build-publish
        else
          just build
        fi

    - name: "Build Project" 
      if: ${{ inputs.os == 'windows' && inputs.arch == 'arm64' }}
      shell: powershell
      env:
        os: "${{inputs.os}}"
        arch: "${{inputs.arch}}"
        mach_version: "${{inputs.mach_version}}"
        profile: "${{inputs.profile}}"
      run: "ech0 windows arm64"

    - name: "Build Project" 
      if: ${{ inputs.os == 'windows' && inputs.arch == 'amd64' }}
      shell: powershell
      env:
        os: "${{inputs.os}}"
        arch: "${{inputs.arch}}"
        mach_version: "${{inputs.mach_version}}"
        profile: "${{inputs.profile}}"
      run: "ech0 windows amd64"

    - name: "Copy Files"
      if: ${{ runner.os != 'Windows' && inputs.mach_version != '' }}
      shell: bash
      env:
        job: ''
      run: |
        export ROOT_DIR="$(pwd)"

        mkdir $ROOT_DIR/artifacts
        cd $ROOT_DIR/target/$JOB_NAME

        mv release mach
        tar -czvf mach-$JOB_NAME.tar.gz mach
        mv mach-$JOB_NAME.tar.gz $ROOT_DIR/artifacts

        cd $ROOT_DIR/npm/mach-os-arch
        npm pack
        mv *.tgz npm-mach-$JOB_NAME.tgz
        mv *.tgz $ROOT_DIR/artifacts/npm-mach-$JOB_NAME.tgz

        ls -l $ROOT_DIR/artifacts     
