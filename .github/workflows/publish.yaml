name: Publish
on: 
  workflow_dispatch:
    branches:
      - main
      - development
    inputs:
      prerelease:
        description: 'Prerelease'
        required: true
        default: false
        type: boolean
      publish-bin:
        description: 'Publish Binaries'
        required: true
        default: false
        type: boolean
      bin-version:
        description: 'Bin Version'
        required: false
        default: ''
        type: string
      publish-npm:
        description: 'Publish NPM'
        required: true
        default: false
        type: boolean
      npm-version:
        description: 'NPM Version'
        required: false
        default: ''
        type: string
      npm-bin-target:
        description: 'NPM Bin Target Version'
        required: false
        default: ''
        type: string

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - name: Test
        run: |
          node .github/scripts/run.mjs test

  linux-amd64:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }

      - name: Setup Dependencies
        run: |
          npm install -g npm pnpm
          pnpm install
          rustup target add x86_64-unknown-linux-gnu

      - name: Build
        run: |
          node .github/scripts/run.mjs build --profile release-lto --target x86_64-unknown-linux-gnu

      - name: Package
        run: |
          cd target/linux-amd64
          mv release-lto mach
          tar -czvf mach-linux-amd64.tar.gz mach

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}.tar.gz
          path: target/linux-amd64/mach-linux-amd64.tar.gz
          if-no-files-found: error
          retention-days: 1
      
  linux-arm64:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }

      - name: Setup Dependencies
        run: |
          npm install -g npm pnpm
          pnpm install
          sudo apt-get install gcc-aarch64-linux-gnu build-essential
          rustup target add aarch64-unknown-linux-gnu
          aarch64-linux-gnu-gcc --version

      - name: Build
        run: |
          export CC=aarch64-linux-gnu-gcc
          node .github/scripts/run.mjs build --profile release-lto --target aarch64-unknown-linux-gnu

      - name: Package
        run: |
          cd target/linux-arm64
          mv release-lto mach
          tar -czvf mach-linux-arm64.tar.gz mach
      
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}.tar.gz
          path: target/linux-arm64/mach-linux-arm64.tar.gz
          if-no-files-found: error
          retention-days: 1

  macos-amd64:
    runs-on: macos-13
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }

      - name: Setup Dependencies
        run: |
          npm install -g npm pnpm
          pnpm install
          rustup target add x86_64-apple-darwin

      - name: Build
        run: |
          node .github/scripts/run.mjs build --profile release-lto --target x86_64-apple-darwin

      - name: Package
        run: |
          cd target/macos-amd64
          mv release-lto mach
          tar -czvf mach-macos-amd64.tar.gz mach

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}.tar.gz
          path: target/macos-amd64/mach-macos-amd64.tar.gz
          if-no-files-found: error
          retention-days: 1
      
  macos-arm64:
    runs-on: macos-13
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }

      - name: Setup Dependencies
        run: |
          npm install -g npm pnpm
          pnpm install
          rustup target add aarch64-apple-darwin

      - name: Build
        run: |
          node .github/scripts/run.mjs build --profile release-lto --target aarch64-apple-darwin

      - name: Package
        run: |
          cd target/macos-arm64
          mv release-lto mach
          tar -czvf mach-macos-arm64.tar.gz mach
      
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}.tar.gz
          path: target/macos-arm64/mach-macos-arm64.tar.gz
          if-no-files-found: error
          retention-days: 1

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}
          path: target/macos-arm64/mach-macos-arm64.tar.gz
          if-no-files-found: error
          retention-days: 1

  windows-amd64:
    runs-on: windows-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }

      - name: Setup Dependencies
        run: |
          npm install -g npm pnpm
          pnpm install
          rustup target add x86_64-pc-windows-msvc

      - name: Build
        run: |
          node .github/scripts/run.mjs build --profile release-lto --target x86_64-pc-windows-msvc

      - name: Package
        run: |
          cd target/windows-amd64
          mv release-lto mach
          tar -czvf mach-windows-amd64.tar.gz mach

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}.tar.gz
          path: target/windows-amd64/mach-windows-amd64.tar.gz
          if-no-files-found: error
          retention-days: 1

  windows-arm64:
    runs-on: windows-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }

      - name: Setup Dependencies
        run: |
          npm install -g npm pnpm
          pnpm install
          rustup target add aarch64-pc-windows-msvc

      - name: Build
        run: |
          node .github/scripts/run.mjs build --profile release-lto --target aarch64-pc-windows-msvc

      - name: Package
        run: |
          cd target/windows-arm64
          mv release-lto mach
          tar -czvf mach-windows-arm64.tar.gz mach
      
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}.tar.gz
          path: target/windows-arm64/mach-windows-arm64.tar.gz
          if-no-files-found: error
          retention-days: 1

  publish-github-release:
    runs-on: ubuntu-latest
    needs: [linux-amd64, linux-arm64, macos-amd64, macos-arm64, windows-amd64, windows-arm64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      - name: Publish` Github Release
        run: |
          TAG=$BIN_VERSION

          if [ "$PUBLISH_BIN" != "true" ]; then
            echo Skipping publish
            exit 0
          fi
          if [ "$BIN_VERSION" == "" ]; then
            echo Missing bin version
            exit 1
          fi

          gh release create $BIN_VERSION --draft --notes "Automatically built binaries"
          if [ "$PRERELEASE" == "true" ]; then
            gh release edit $BIN_VERSION --prerelease
          fi
          
          gh release upload $BIN_VERSION linux-amd64.tar.gz/mach-linux-amd64.tar.gz
          gh release upload $BIN_VERSION linux-arm64.tar.gz/mach-linux-arm64.tar.gz
          gh release upload $BIN_VERSION macos-amd64.tar.gz/mach-macos-amd64.tar.gz
          gh release upload $BIN_VERSION macos-arm64.tar.gz/mach-macos-arm64.tar.gz
          gh release upload $BIN_VERSION windows-amd64.tar.gz/mach-windows-amd64.tar.gz
          gh release upload $BIN_VERSION windows-arm64.tar.gz/mach-windows-arm64.tar.gz
          
          gh release edit $BIN_VERSION --draft=false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRERELEASE: ${{ inputs.prerelease }}
          PUBLISH_BIN: ${{ inputs.publish-bin }}
          BIN_VERSION: ${{ inputs.bin-version }}


  build-npm-package:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }

      - name: Setup Dependencies
        run: |
          npm install -g npm pnpm
          pnpm install

      - name: Build
        run: |
          node .github/scripts/run.mjs build

      - name: Package
        run: |
          if [ "$PUBLISH_NPM" != "true" ]; then
            exit
          fi
          if [ "$NPM_VERSION" == "" ]; then
            exit 1
          fi
          if [ "$NPM_BIN_TARGET" == "" ]; then
            exit 1
          fi

          cd npm/mach
          echo $NPM_VERSION > _scripts/prepack/npm_version.txt
          echo $NPM_BIN_TARGET > _scripts/postinstall/npm-bin-target.txt
          pnpm pack
          mv *.tgz ../../mach-npm.tgz

        env:
          PRERELEASE: ${{ inputs.prerelease }}
          NPM_VERSION: ${{ inputs.npm-version }}
          NPM_BIN_TARGET: ${{ inputs.npm-bin-target }}
          PUBLISH_NPM: ${{ inputs.publish-npm }}

      - uses: actions/upload-artifact@v4
        with:
          name: mach-npm.tgz
          path: mach-npm.tgz
          if-no-files-found: error
          retention-days: 1

  publish-npm-package:
    runs-on: ubuntu-latest
    needs: [build-npm-package]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      - name: Publish NPM Package
        run: |
          if [ "$PUBLISH_NPM" != "true" ]; then
            exit
          fi
          if [ "$NPM_VERSION" == "" ]; then
            exit 1
          fi
          if [ "$NPM_BIN_TARGET" == "" ]; then
            exit 1
          fi

          npm install -g npm pnpm
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> $HOME/.npmrc

          echo "PRERELEASE = $PRERELEASE"

          if [ "$PRERELEASE" == "true" ]; then
            echo Publishing development tag
            pnpm publish --tag development --access=public ./mach-npm.tgz/mach-npm.tgz --no-git-checks
          else
            echo Publishing latest tag
            pnpm publish --access=public ./mach-npm.tgz/mach-npm.tgz --no-git-checks
          fi
          
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          PRERELEASE: ${{ inputs.prerelease }}
          NPM_VERSION: ${{ inputs.npm-version }}
          NPM_BIN_TARGET: ${{ inputs.npm-bin-target }}
          PUBLISH_NPM: ${{ inputs.publish-npm }}
